server.port=80
#추후 사용할 Viewer 이름이 타임리프(Thymeleaf)입니다.
#타임리프의 cache값을 false로
spring.thymeleaf.cache=false

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://14.42.124.85/whiteboard
spring.datasource.username=hanul
spring.datasource.password=910725

#ORM(Object Relationship Mapping) Application
#: JPA를 DB Entity로 바인딩하는 중간단계의 프로그램
#스프링부트에서는 기본적으로 Hibernate를 사용하는데,
#업체에 따라서 MyBatis, IBatis 등을 사용합니다.
#모두 같은 ORM Mapper라고 생각하면 됩니다.

#실행되는 DB쿼리를 콘솔에 출력하도록 설정
spring.jpa.show-sql=true

# 프로젝트 실행 시 자동으로 DDL생성 여부를 결정하는 속성
# create은 매번 생성, update은 변경이 필요할 때 alter로 처리, 테이블이 없는 경우엔 create됩니다.
spring.jpa.hibernate.ddl-auto=update

# 실제 JPA 구현체인 Hibernate가 동작하면서 발생하는 SQL을 콘솔에 출력
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.show-sql=true

# 바인딩되는 파라미터 값을 출력
logging.level.org.hibernate.type.descriptor.sql=trace
spring.jpa.open-in-view=true

#웹요청의 모든 내용을 debug 모드로 콘솔에 출력
logging.level.web=debug


logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace

#Post 요청 시 요청 파라미터 보이게 하는 속성
spring.mvc.log-request-details=true

spring.jpa.properties.hibernate.highlight_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

#스프링에서는 파일 업로드를 처리하는 방법이 많지만, 우린 기본 내장된 tocat의 servlet API
#를 이용해서 업로드 처리를 함
#아래는 업로드 처리시 서버에서 수행해야 할 기본 설정 작업내용

#아래는 반드시 해야함.. muluipart 패키지의 모든 api를 사용 가능하도록 설정
spring.servlet.multipart.enabled=true
#업로드시 저장될 폴더 지정
spring.servlet.multipart.location=D:\\upload
#요청시 한번에 처리할 최대 파일 사이즈 지정
spring.servlet.multipart.max-request-size=1025MB
#파일 하나의 최대 크기 설정
spring.servlet.multipart.max-file-size=100MB

#스프링부트 콘솔 색
spring.output.ansi.enabled=always

com.whiteboard.whiteboard.path = D:\\upload


#시큐리티 적용안하고 가기...
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
#테스트1


#카카오 로그인
kakao.client.id=317e8a9e5d4e2442420c348bd854c734
kakao.client.secret=317e8a9e5d4e2442420c348bd854c734
kakao.redirect.url=http://localhost/kakao/callback